---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: flux-system
spec:
  chart:
    spec:
      chart: kube-prometheus-stack
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
      version: 23.2.0
  interval: 1m0s
  targetNamespace: monitoring
  values:
    additionalPrometheusRulesMap: {}
    alertmanager:
      alertmanagerSpec:
        additionalPeers: []
        affinity: {}
        alertmanagerConfigNamespaceSelector: {}
        alertmanagerConfigSelector: {}
        clusterAdvertiseAddress: false
        configMaps: []
        containers: []
        externalUrl: null
        forceEnableClusterMode: false
        image:
          repository: quay.io/prometheus/alertmanager
          sha: ""
          tag: v0.23.0
        initContainers: []
        listenLocal: false
        logFormat: logfmt
        logLevel: info
        nodeSelector:
          node-type: worker
        paused: false
        persistence:
          enabled: true
          existingClaim: kps-prometheus-alertmanager-pvc
          type: pvc
        podAntiAffinity: ""
        podAntiAffinityTopologyKey: kubernetes.io/hostname
        podMetadata: {}
        portName: http-web
        priorityClassName: ""
        replicas: 1
        resources: {}
        retention: 120h
        routePrefix: /
        secrets: []
        securityContext:
          fsGroup: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        storage: {}
        tolerations: []
        topologySpreadConstraints: []
        useExistingSecret: false
        volumeMounts: []
        volumes: []
      annotations: {}
      apiVersion: v2
      config:
        global:
          resolve_timeout: 5m
        receivers:
        - name: "null"
        route:
          group_by:
          - job
          group_interval: 5m
          group_wait: 30s
          receiver: "null"
          repeat_interval: 12h
          routes:
          - match:
              alertname: Watchdog
            receiver: "null"
        templates:
        - /etc/alertmanager/config/*.tmpl
      enabled: true
      extraSecret:
        annotations: {}
        data: {}
      ingress:
        annotations: {}
        enabled: false
        hosts: []
        labels: {}
        paths: []
        tls: []
      ingressPerReplica:
        annotations: {}
        enabled: false
        hostDomain: ""
        hostPrefix: ""
        labels: {}
        paths: []
        tlsSecretName: ""
        tlsSecretPerReplica:
          enabled: false
          prefix: alertmanager
      podDisruptionBudget:
        enabled: false
        maxUnavailable: ""
        minAvailable: 1
      secret:
        annotations: {}
      service:
        additionalPorts: []
        annotations: {}
        clusterIP: ""
        externalIPs: []
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePort: 30903
        port: 9093
        targetPort: 9093
        type: ClusterIP
      serviceAccount:
        annotations: {}
        create: true
        name: ""
      serviceMonitor:
        bearerTokenFile: null
        interval: ""
        metricRelabelings: []
        proxyUrl: ""
        relabelings: []
        scheme: ""
        selfMonitor: true
        tlsConfig: {}
      servicePerReplica:
        annotations: {}
        enabled: false
        loadBalancerSourceRanges: []
        nodePort: 30904
        port: 9093
        targetPort: 9093
        type: ClusterIP
      templateFiles: {}
      tplConfig: false
    commonLabels: {}
    coreDns:
      enabled: true
      service:
        port: 9153
        targetPort: 9153
      serviceMonitor:
        interval: ""
        metricRelabelings: []
        proxyUrl: ""
        relabelings: []
    defaultRules:
      additionalRuleLabels: {}
      annotations: {}
      appNamespacesTarget: .*
      create: true
      labels: {}
      rules:
        alertmanager: true
        etcd: true
        general: true
        k8s: true
        kubeApiserver: true
        kubeApiserverAvailability: true
        kubeApiserverError: true
        kubeApiserverSlos: true
        kubePrometheusGeneral: true
        kubePrometheusNodeAlerting: true
        kubePrometheusNodeRecording: true
        kubeScheduler: true
        kubeStateMetrics: true
        kubelet: true
        kubernetesAbsent: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        network: true
        node: true
        prometheus: true
        prometheusOperator: true
        time: true
      runbookUrl: https://github.com/kubernetes-monitoring/kubernetes-mixin/tree/master/runbook.md#
    fullnameOverride: ""
    global:
      imagePullSecrets: []
      rbac:
        create: true
        pspAnnotations: {}
        pspEnabled: true
    grafana:
      additionalDataSources: []
      adminPassword: ${SECRET_GRAFANA_ADMIN_PASSWORD}
      defaultDashboardsEnabled: true
      defaultDashboardsTimezone: ${TIMEZONE}
      deleteDatasources: []
      enabled: true
      extraConfigmapMounts: []
      forceDeployDashboards: false
      forceDeployDatasources: false
      ingress:
        annotations: {}
        enabled: false
        hosts: []
        labels: {}
        path: /
        tls: []
      namespaceOverride: ""
      nodeSelector:
        node-type: worker
      persistence:
        accessModes:
        - ReadWriteOnce
        enabled: true
        existingClaim: kps-grafana-data-pvc
        finalizers:
        - kubernetes.io/pvc-protection
        size: 10Gi
        type: pvc
      service:
        portName: http-web
      serviceMonitor:
        interval: ""
        metricRelabelings: []
        path: /metrics
        relabelings: []
        selfMonitor: true
      sidecar:
        dashboards:
          annotations: {}
          enabled: true
          label: grafana_dashboard
          multicluster:
            etcd:
              enabled: false
            global:
              enabled: false
          provider:
            allowUiUpdates: false
        datasources:
          annotations: {}
          createPrometheusReplicasDatasources: false
          defaultDatasourceEnabled: true
          enabled: true
          label: grafana_datasource
    kube-state-metrics:
      namespaceOverride: ""
      podSecurityPolicy:
        enabled: true
      rbac:
        create: true
    kubeApiServer:
      enabled: true
      serviceMonitor:
        interval: ""
        jobLabel: component
        metricRelabelings: []
        proxyUrl: ""
        relabelings: []
        selector:
          matchLabels:
            component: apiserver
            provider: kubernetes
      tlsConfig:
        insecureSkipVerify: false
        serverName: kubernetes
    kubeControllerManager:
      enabled: false
      endpoints:
      - 192.168.178.210
      - 192.168.178.211
      - 192.168.178.212
      service:
        enabled: true
        port: 10257
        targetPort: 10257
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
        interval: ""
        metricRelabelings: []
        proxyUrl: ""
        relabelings: []
        serverName: null
    kubeDns:
      enabled: false
      service:
        dnsmasq:
          port: 10054
          targetPort: 10054
        skydns:
          port: 10055
          targetPort: 10055
      serviceMonitor:
        dnsmasqMetricRelabelings: []
        dnsmasqRelabelings: []
        interval: ""
        metricRelabelings: []
        proxyUrl: ""
        relabelings: []
    kubeEtcd:
      enabled: true
      endpoints:
      - 192.168.178.210
      - 192.168.178.211
      - 192.168.178.212
      service:
        enabled: true
        port: 2381
        targetPort: 2381
      serviceMonitor:
        caFile: ""
        certFile: ""
        enabled: true
        insecureSkipVerify: false
        interval: ""
        keyFile: ""
        metricRelabelings: []
        proxyUrl: ""
        relabelings: []
        scheme: http
        serverName: ""
    kubeProxy:
      enabled: true
      endpoints:
      - 192.168.178.210
      - 192.168.178.211
      - 192.168.178.212
      service:
        enabled: true
        port: 10249
        targetPort: 10249
      serviceMonitor:
        enabled: true
        https: false
        interval: ""
        metricRelabelings: []
        proxyUrl: ""
        relabelings: []
    kubeScheduler:
      enabled: false
      endpoints:
      - 192.168.178.210
      - 192.168.178.211
      - 192.168.178.212
      service:
        enabled: true
        port: 10259
        targetPort: 10259
      serviceMonitor:
        enabled: true
        https: true
        insecureSkipVerify: true
        interval: ""
        metricRelabelings: []
        proxyUrl: ""
        relabelings: []
        serverName: null
    kubeStateMetrics:
      enabled: true
      serviceMonitor:
        honorLabels: true
        interval: ""
        metricRelabelings: []
        proxyUrl: ""
        relabelings: []
        scrapeTimeout: ""
        selectorOverride: {}
        selfMonitor:
          enabled: false
    kubeTargetVersionOverride: ""
    kubeVersionOverride: ""
    kubelet:
      enabled: true
      namespace: kube-system
      serviceMonitor:
        cAdvisor: true
        cAdvisorMetricRelabelings: []
        cAdvisorRelabelings:
        - sourceLabels:
          - __metrics_path__
          targetLabel: metrics_path
        https: true
        interval: ""
        metricRelabelings: []
        probes: true
        probesMetricRelabelings: []
        probesRelabelings:
        - sourceLabels:
          - __metrics_path__
          targetLabel: metrics_path
        proxyUrl: ""
        relabelings:
        - sourceLabels:
          - __metrics_path__
          targetLabel: metrics_path
        resource: false
        resourcePath: /metrics/resource/v1alpha1
        resourceRelabelings:
        - sourceLabels:
          - __metrics_path__
          targetLabel: metrics_path
    nameOverride: ""
    namespaceOverride: ""
    nodeExporter:
      enabled: true
      jobLabel: jobLabel
      serviceMonitor:
        interval: ""
        metricRelabelings: []
        proxyUrl: ""
        relabelings: []
        scrapeTimeout: ""
    prometheus:
      additionalPodMonitors: []
      additionalRulesForClusterRole: []
      additionalServiceMonitors: []
      annotations: {}
      enabled: true
      extraSecret:
        annotations: {}
        data: {}
      ingress:
        annotations: {}
        enabled: false
        hosts: []
        labels: {}
        paths: []
        tls: []
      ingressPerReplica:
        annotations: {}
        enabled: false
        hostDomain: ""
        hostPrefix: ""
        labels: {}
        paths: []
        tlsSecretName: ""
        tlsSecretPerReplica:
          enabled: false
          prefix: prometheus
      podDisruptionBudget:
        enabled: false
        maxUnavailable: ""
        minAvailable: 1
      podSecurityPolicy:
        allowedCapabilities: []
        allowedHostPaths: []
        volumes: []
      prometheusSpec:
        additionalAlertManagerConfigs: []
        additionalAlertManagerConfigsSecret: {}
        additionalAlertRelabelConfigs: []
        additionalPrometheusSecretsAnnotations: {}
        additionalRemoteRead: []
        additionalRemoteWrite: []
        additionalScrapeConfigs: []
        additionalScrapeConfigsSecret: {}
        affinity: {}
        alertingEndpoints: []
        allowOverlappingBlocks: false
        apiserverConfig: {}
        arbitraryFSAccessThroughSMs: false
        configMaps: []
        containers: []
        disableCompaction: false
        enableAdminAPI: false
        enableFeatures: []
        enforcedLabelLimit: false
        enforcedLabelNameLengthLimit: false
        enforcedLabelValueLengthLimit: false
        enforcedNamespaceLabel: ""
        enforcedSampleLimit: false
        enforcedTargetLimit: false
        evaluationInterval: ""
        externalLabels: {}
        externalUrl: ""
        ignoreNamespaceSelectors: false
        image:
          repository: quay.io/prometheus/prometheus
          sha: ""
          tag: v2.31.1
        initContainers: []
        listenLocal: false
        logFormat: logfmt
        logLevel: info
        nodeSelector:
          node-type: monitoring
        overrideHonorLabels: false
        overrideHonorTimestamps: false
        paused: false
        persistence:
          enabled: true
          existingClaim: kps-prometheus-server-pvc
          type: pvc
        podAntiAffinity: ""
        podAntiAffinityTopologyKey: kubernetes.io/hostname
        podMetadata: {}
        podMonitorNamespaceSelector: {}
        podMonitorSelector: {}
        podMonitorSelectorNilUsesHelmValues: true
        portName: http-web
        priorityClassName: ""
        probeNamespaceSelector: {}
        probeSelector: {}
        probeSelectorNilUsesHelmValues: true
        prometheusExternalLabelName: ""
        prometheusExternalLabelNameClear: false
        prometheusRulesExcludedFromEnforce: []
        query: {}
        queryLogFile: false
        remoteRead: []
        remoteWrite: []
        remoteWriteDashboards: false
        replicaExternalLabelName: ""
        replicaExternalLabelNameClear: false
        replicas: 1
        resources: {}
        retention: 10d
        retentionSize: ""
        routePrefix: /
        ruleNamespaceSelector: {}
        ruleSelector: {}
        ruleSelectorNilUsesHelmValues: true
        scrapeInterval: ""
        scrapeTimeout: ""
        secrets: []
        securityContext:
          fsGroup: 2000
          runAsGroup: 2000
          runAsNonRoot: true
          runAsUser: 1000
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: true
        shards: 1
        storageSpec: {}
        thanos: {}
        tolerations: []
        topologySpreadConstraints: []
        volumeMounts: []
        volumes: []
        walCompression: false
        web: {}
      service:
        annotations: {}
        clusterIP: ""
        externalIPs: []
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePort: 30090
        port: 9090
        sessionAffinity: ""
        targetPort: 9090
        type: ClusterIP
      serviceAccount:
        annotations: {}
        create: true
        name: ""
      serviceMonitor:
        bearerTokenFile: null
        interval: ""
        metricRelabelings: []
        relabelings: []
        scheme: ""
        selfMonitor: true
        tlsConfig: {}
      servicePerReplica:
        annotations: {}
        enabled: false
        loadBalancerSourceRanges: []
        nodePort: 30091
        port: 9090
        targetPort: 9090
        type: ClusterIP
      thanosIngress:
        annotations: {}
        enabled: false
        hosts: []
        labels: {}
        nodePort: 30901
        paths: []
        servicePort: 10901
        tls: []
      thanosService:
        annotations: {}
        clusterIP: None
        enabled: false
        httpNodePort: 30902
        httpPort: 10902
        httpPortName: http
        labels: {}
        nodePort: 30901
        port: 10901
        portName: grpc
        targetHttpPort: http
        targetPort: grpc
        type: ClusterIP
      thanosServiceExternal:
        annotations: {}
        enabled: false
        httpNodePort: 30902
        httpPort: 10902
        httpPortName: http
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePort: 30901
        port: 10901
        portName: grpc
        targetHttpPort: http
        targetPort: grpc
        type: LoadBalancer
      thanosServiceMonitor:
        bearerTokenFile: null
        enabled: false
        interval: ""
        metricRelabelings: []
        relabelings: []
        scheme: ""
        tlsConfig: {}
    prometheus-node-exporter:
      extraArgs:
      - --collector.filesystem.ignored-mount-points=^/(dev|proc|sys|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
      - --collector.filesystem.ignored-fs-types=^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$
      namespaceOverride: ""
      podLabels:
        jobLabel: node-exporter
      service:
        portName: http-metrics
    prometheusOperator:
      admissionWebhooks:
        caBundle: ""
        certManager:
          enabled: false
        enabled: true
        failurePolicy: Fail
        patch:
          affinity: {}
          enabled: true
          image:
            pullPolicy: IfNotPresent
            repository: k8s.gcr.io/ingress-nginx/kube-webhook-certgen
            sha: f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
            tag: v1.0
          nodeSelector: {}
          podAnnotations: {}
          priorityClassName: ""
          resources: {}
          securityContext:
            runAsGroup: 2000
            runAsNonRoot: true
            runAsUser: 2000
          tolerations: []
      affinity: {}
      alertmanagerInstanceNamespaces: []
      denyNamespaces: []
      dnsConfig: {}
      enabled: true
      hostNetwork: false
      image:
        pullPolicy: IfNotPresent
        repository: quay.io/prometheus-operator/prometheus-operator
        sha: ""
        tag: v0.52.1
      kubeletService:
        enabled: true
        name: ""
        namespace: kube-system
      namespaces: {}
      nodeSelector:
        node-type: worker
      podAnnotations: {}
      podLabels: {}
      prometheusConfigReloader:
        image:
          repository: quay.io/prometheus-operator/prometheus-config-reloader
          sha: ""
          tag: v0.52.1
        resources:
          limits:
            cpu: 100m
            memory: 50Mi
          requests:
            cpu: 100m
            memory: 50Mi
      prometheusInstanceNamespaces: []
      resources: {}
      secretFieldSelector: ""
      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      service:
        additionalPorts: []
        annotations: {}
        clusterIP: ""
        externalIPs: []
        labels: {}
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        nodePort: 30080
        nodePortTls: 30443
        type: ClusterIP
      serviceAccount:
        create: true
        name: ""
      serviceMonitor:
        interval: ""
        metricRelabelings: []
        relabelings: []
        scrapeTimeout: ""
        selfMonitor: true
      thanosImage:
        repository: quay.io/thanos/thanos
        sha: ""
        tag: v0.23.1
      thanosRulerInstanceNamespaces: []
      tls:
        enabled: true
        internalPort: 10250
        tlsMinVersion: VersionTLS13
      tolerations: []

